STD C :

malloc(size) alloue la mémoire et renvoie un pointeur dessus (void*).
free(truc) le détruit (i.e. le marque libre pour l'OS).
memset(string s, char c, int n) copie c dans les n premiers caractères de s.
memcpy(string s1, string s2, int n) copie les n premiers caractères de s2 dans s1.

union nom { members } var définit une variable var de type nom, qui est un l'un des members (seul l'un des members peut-être non nul à un instant donné, car tout est stocké au même emplacement mémoire).


minilisp.h :

Un jit_word_t est un entier non signé sur 64 bits. Un tag_t aussi.

Le type Cell a l'air d'être un genre de liste chaînée, probablement pour représenter les listes du Lisp, avec un champ value dont on ne comprend pas bien l'utilité (peut-être que c'est pour représenter les atomes de la liste). On a donc :
 - la tête (ar), composée d'une valeur (un word) ou d'une adresse (pointeur sur des données).
 - la suite (dr), composée d'une taille (un word) ou d'un pointeur sur des données next.
 - un tag (qui est un word, appremment dit le type, genre CONS, LET, STREAM..., définis avec des #define). Le tag définit quel élément de ar ou dr est utilisé. TAG_MARK (qui peut-être combiné avec les autres tags) signifie que la cell est libre il semblerait.
Note : pour connaître la structure de chaque cell (en fonction du TAG), aller voir alloc.c est pas mal (initialisation des champs).

Une env_entry est un objet minilisp avec un nom et une Cell.

car(cell) renvoie l'adresse (une autre Cell) de l'élément en tête de liste, et cdr(cell) la suite (une autre Cell).


strmap.h / strmap.c : (ça se voit que c'est pas lui qui l'a écrit, c'est documenté...)

Une StrMap est une hash table dont les clés sont des strings. Il y a les fonctions standard de création (sm_new), suppression (sm_delete), accès (sm_get), existence (sm_exists), ajout (sm_put, remplace si la clé était déjà associée), comptage de clés (sm_get_count) et itération (sm_enum) qui prend un pointeur sur une fonction à appeler sur chaque paire (clé, valeur).

Implémentation : table de hachage standard, le nombre de clés est sauvegardé partout. A noter que la suppression de la tabe ne libère pas les valeurs stockées, seulement les string allouées pour les clés (peut-être lui qui a commenté la ligne correspondante (97)). La fonction de hachage est de la magie C standard avec un genre de Hölder et des nombres premiers (itérer h = a * h + b).


alloc.h / alloc.c :

Un env_t est une StrMap (environnement) qui contient des env_entry
Un cell_allocator_t est un type somme CA_STACK | CA_HEAP
Une MemStats contient le nombre de cells utilisées / max (stockées sur le cell_heap) et le nombre d'octets du tas utilisés / max (jusqu'ici je pense, rien à voir avec une limite système).
oom_cell est une cell prédéfinie qui représente l'erreur ERR_OUT_OF_MEMORY

Structure de la mémoire : on a un cell_heap (qui est représenté par un arbre binaire complet gauche dans un tableau) et un heap standard. On a aussi une free_list qui est un tableau (mdr, vive le C, pointeur = tableau tro draul) qui contient les addresses des cells libres (mais pas forcément allouées dans le cell_heap, d'où la présence de free_list_avail qui est le nombre de cells libres et free_list_consumed qui est le nombre de cells allouées, donc occupées + libres).

Il y a des constantes arbitraires : 100 000 cells sur le heap_cells et 8Ko de heap
L'initialisation se fait en faisant un bon malloc des familles pour tout le cell_heap, et met des 0 partout.

L'allocation d'une cell (cell_alloc) se fait en rajoutant une cell dans le cell_heap : soit on a une cell marquée comme libre, et on renvoie son adresse, soit c'est pas le cas et on renvoie l'adresse de la première case libre du cell_heap.

L'allocation de bytes (bytes_alloc) est juste un malloc (apparemment la gestion du byte_heap a été commentée, mais c'était juste la gestion du tas habituelle).

Fonction helper (pas visible en-dehors du fichier) mark_tree(cell) récursive qui rajoute TAG_MARK à tous les tags si ce n'est pas déjà le cas. Elle est appelée par collect_garbage_iter.

collect_garbage parcourt la pile (du haut (stack_end) vers le bas (stack_pointer)) en markant les cells qu'il rencontre. L'auteur reconnaît lui-même qu'il y a un hack car il ne connait pas le type des données de la pile (et propose donc de mettre le type en header des données susceptibles de se retrouver dans la pile). Il appelle collect_garbage_iter sur chacune des cells contenues dans l'environnement, et aussi mark_tree sur la liste des fichiers. Il sweep ensuite : tout ce qui n'a pas été marqué (et est donc inatteignable) se prend un TAG_FREED et il met à jour free_list, free_list_avail, et free_list_consumed (apparemment il a un problème avec les LAMBDAS, parce que les clôtures anonymes ne sont pointées par personnes mais seraient quand même utilisées (?), donc il les libère pas ; la solution proposée est de mettre de la metadata on ne sait où avec les appelants). Il ne free pas les TAB_BYTES ou TAG_STR (pourquoi ?). Enfin tout le monde perd son tag marké pour l'étape suivante. La fonction renvoie un entier (avec alloc_int) contenant le nombre de cells libérées.

cell_realloc déplace une cell à une nouvelle adresse, sans free la cell qu'il y avait avant (//FIXME...).

alloc_stats renvoie une MemStats avec les bonnes infos dedans.

alloc_cons (TAG_CONS) et alloc_list font ce qu'on pense avec des cell_alloc et en initialisant les pointeurs. L'auteur de demande si il devrait copier le contenu ou les adresses (ici il copie les adresses dans les cells allouées).
alloc_sym alloue un symbole (TAG_SYM, i.e. un atome) avec la string passée en argument.
alloc_int (TAG_INT) alloue une cell contenant un entier.
alloc_num_bytes (TAG_BYTES) alloue une cell contenant des données random.
alloc_bytes appelle alloc_num_bytes avec SYM_INIT_BUFFER_SIZE.
Idem pour aloloc_num_string (TAG_STR), alloc_substr (recopie une sous-string dans une nouvelle string), alloc_string (alloc_num_string avec SYM_INIT_BUFFER_SIZE), alloc_string_copy, alloc_string_from_bytes, alloc_concat (concatène deux cell contenant des bytes ou une string), alloc_builtin (TAG_BUILTIN), alloc_lambda (TAG_LAMBDA) qui contient un pointeur sur une cell (ses arguments) et n'a pas de définition, alloc_nil, alloc_vector (TAG_VEC), alloc_struct_def (TAG_STRUCT_DEF), alloc_struct (TAG_STRUCT) qui prend une struct_def et renvoie une vector cell dont le 0 pointe sur la struct_def et les num_fields champs suivants pointent sur un clone des éléments de la def, alloc_error (TAG_ERROR), et alloc_clone qui recopie récursivement toute la structure de la cell.


writer.h / writer.c :

tag_to_str renvoie juste une string décrivant le tag en question (bizarrement, les cases TAGT_FS (filesystem) et TAG_MARK (gc_mark) sont commentés...).

write_ écrit (apparemment, trop long pour tout lire...) la cell dans un buffer passé en argument. (fonction invisible depuis l'extérieur)
Ecriture sous la forme ou l'on écrit du Lisp (ex: (+ 1 2)). Le paramètre in_list permet d'écire (1 2 3) au lieu de (1 (2 3))

lisp_write appelle juste write_
lip_write_to_cell écrit la première cell dans la deuxième qui est une TAG_STR ou TAG_BYTES.


reader.h / reader.c :

parser de lisp écrit à la main


stream.h / stream.c :

Filesystem est une collection de cells qui sont des fonctions pour ouvrir un fichier, le fermer, le lire, écrire, supprimer et un mmap (itérer sur toutes les cells du fichier) (ainsi que mount_point).

Un Stream est un filesystem avec des infos du genre taille, position, id, mode...

fs_open permet d'ouvrir un fichier (prend le path en argument) (à lire plus en détail)

fs_mmap permet de map la mmap_fn sur le contenu du fichier (à lire plus en détail)

fs_mount

wrap_in_lambda

stream_read

stream_write

fs_mount_builtin

filesystems_init


jit_x64.x :

implémente des commandes permettant d'écrire de l'assembleur pour écire du x86-64


utf8.h / utf8.c :

permet d'écrire de faire des conversions entre chaînes d'entiers et des "rune" (= caractère) unicode.
Leur taille en nombre d'octects est variable.


compiler_new.h / compiler_new.c :

Un arg_t est une enum avec plusieurs cas (constante, environnement, lamda, registre, pile...)
Un Arg contient un arg_t, une cell, un env_entry, un slot, un nom et un nom de type
Une Frame est une genre de liste chaînée
builtin_t est une enum contenant toutes les fonctions minilisp de base

lookup_global_symbol cherche dans global_env (un env_t déclaré dans compiler_new.c) l'env_entry correspondant au nom donné
insert_symbol(symbol, cell, env) rajoute ce qu'on pense dans l'env et renvoie cell
insert_global_symbol est juste un raccourci avec global_env

load_int produit du code assembleur pour charger un argument dans un registre
load_cell a l'air de faire un truc un peu pareil
get_sym_frame_idx cherche dans un tableau d'arguments (éventuellement en ignorant les registres) un argument dont le nom n'est pas celui cherché (et renvoie son indice)

push_frame_regs push les n registres R4...R4+n sur la pile où n est le nombre d'arguments de type ARGT_REG de la frame passée en argument
pop_frame_regs pop au lieu de push

analyze_fn Compte le nombre d'atomes différents (SYM) dans l'expression fournie (recursivement) ?
compatible_types est l'égalité avec en plus Str ~ BYTES
clean_return remet le stack pointer au bon endroit (dépile les arguments)

compile_expr est le KRAKEN

init_compiler initialise pleins de prototypes bizarres et rajoute tous les builtins dans l'environnement avec pleins d'appels à alloc.


compiler_x64_hosted.x :

execute_jitted appelle la fonction passée en argument (funcptr, i.e. void*) avec l'argument 0

compile_for_platform Compile l'expression donnée, l'execute et place le résultat dans res

execute_jitted(void* binary) squoi ça lol

ligne 159: "return !!success;" ça fait vraiment ce que je pense que ça fait??


sledge.c :

Contient le main, qui ouvre le channel donné en argument (ou stdin) et demande dedans une expression, la parse avec read_string, appelle compile_for_platform puis lisp_write sur la sortie.

platform_eval a l'ar d'être utilisé par personne



Après tout ça normalement on a compris son InterimLisp de merde, et on pourra lire les fichiers .l de os/ (et peut-être tests/). Je crois que legacy/ c'est juste des vieux fichiers qu'il garde on sait pas trop pourquoi (il a un git quand même...) donc on osef.

Je pense que l'on maintenant bien compris le fonctionnement, mais il faut alors que l'on trouve un truc donc la complexité est quelque peut intéréssante et que l'on peut améliorer. A mon avis, je ne vois pas vraiment vers quoi d'autre que le génération de l'assembleur on pourrait se tourner...
